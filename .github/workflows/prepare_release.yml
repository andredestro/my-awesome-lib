name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (ignored if version is set)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
      version:
        description: 'Set specific version (e.g., 1.2.3)'
        required: false

env:
  PROJECT_NAME: MyAwesomeLib
  PBXPROJ: MyAwesomeLib.xcodeproj/project.pbxproj
  XCODE_VERSION: 16.4
  CHANGELOG_PATH: docs/CHANGELOG.md
  LICENSE_PATH: docs/LICENSE
  PODSPEC_FILE: MyAwesomeLib.podspec

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: macos-15
    if: github.ref_name == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        uses: ./.github/actions/install-dependencies
        with:
          tools: gh

      - name: Get current project version
        id: get_version
        uses: ./.github/actions/get-project-version
        with:
          project_name: ${{ env.PROJECT_NAME }}

      - name: Bump project version
        id: bump_version
        env:
          CURRENT_VERSION: ${{ steps.get_version.outputs.version }}
          INPUT_BUMP: ${{ github.event.inputs.bump }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          set -euo pipefail
          echo "‚¨ÜÔ∏è Bumping project version..."
          if [ -n "$INPUT_VERSION" ]; then
            if ! [[ "$INPUT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "‚ùå Version must be in format M.m.p (e.g., 1.2.3)"
              exit 1
            fi
            NEW_VERSION="$INPUT_VERSION"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH="${PATCH:-0}"
            case "$INPUT_BUMP" in
              major)
                MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0;;
              minor)
                MINOR=$((MINOR+1)); PATCH=0;;
              *)
                PATCH=$((PATCH+1));;
            esac
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          echo "üî¢ New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update project files
        env:
          PBXPROJ: ${{ env.PBXPROJ }}
          PODSPEC_FILE: ${{ env.PODSPEC_FILE }}
          CHANGELOG_PATH: ${{ env.CHANGELOG_PATH }}
          NEW_VERSION: ${{ steps.bump_version.outputs.new_version }}
        run: |
          set -euo pipefail
          
          echo "üõ†Ô∏è Updating MARKETING_VERSION..."
          sed -i '' -E "s/MARKETING_VERSION = [0-9]+\.[0-9]+(\.[0-9]+)?;/MARKETING_VERSION = $NEW_VERSION;/g" "$PBXPROJ"
          echo "üõ†Ô∏è Updating CURRENT_PROJECT_VERSION..."
          current_proj_version=$(grep -m1 'CURRENT_PROJECT_VERSION =' "$PBXPROJ" | sed -E 's/.*CURRENT_PROJECT_VERSION = ([0-9]+);/\1/')
          new_proj_version=$((current_proj_version+1))
          sed -i '' -E "s/CURRENT_PROJECT_VERSION = [0-9]+;/CURRENT_PROJECT_VERSION = $new_proj_version;/g" "$PBXPROJ"
          echo "‚úÖ Bumped MARKETING_VERSION to $NEW_VERSION, CURRENT_PROJECT_VERSION to $new_proj_version"

          echo "üõ†Ô∏è Updating version in $PODSPEC_FILE..."
          if [ -f "$PODSPEC_FILE" ]; then
            sed -i '' -E "s/^([[:space:]]*[^[:space:]]+\.version[[:space:]]*=[[:space:]]*['\"])[^'\"]+(['\"])/\1$NEW_VERSION\2/" "$PODSPEC_FILE"
            echo "‚úÖ Podspec version updated to $NEW_VERSION"
          else
            echo "‚ö†Ô∏è Podspec file not found: $PODSPEC_FILE"
          fi

          echo "üìù Updating $CHANGELOG_PATH..."
          TODAY=$(date +%Y-%m-%d)
          awk -v ver="$NEW_VERSION" -v today="$TODAY" '
            BEGIN { unreleased_found=0 }
            /^## \[Unreleased\]/ {
              print $0; print ""; print "## [" ver "] - " today; unreleased_found=1; next
            }
            { print $0 }
          ' "$CHANGELOG_PATH" > "$CHANGELOG_PATH.tmp" && mv "$CHANGELOG_PATH.tmp" "$CHANGELOG_PATH"
          echo "‚úÖ CHANGELOG updated for version $NEW_VERSION"

      - name: Create release branch, commit and push changes
        id: create_release_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.bump_version.outputs.new_version }}
        run: |
          set -euo pipefail
          BRANCH_NAME="release/v$VERSION"
          git config user.name "github-actions[bot] (on behalf of ${{ github.actor }})"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "chore(release): prepare release v$VERSION"
          git push origin "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Ensure 'release' label exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh label create release --color FFD700 --description "Release PRs" || true

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.bump_version.outputs.new_version }}
          BRANCH_NAME: ${{ steps.create_release_branch.outputs.branch_name }}
        run: |
          set -euo pipefail
          gh pr create \
            --title "Release v$VERSION" \
            --body "Automated PR to release v$VERSION." \
            --head $BRANCH_NAME \
            --base main \
            --label release
